CONSTTK const
INTTK int
IDENFR _begini
ASSIGN =
INTCON 0
COMMA ,
IDENFR _endi
ASSIGN =
PLUS +
INTCON 18
COMMA ,
IDENFR testfg
ASSIGN =
MINU -
INTCON 6
SEMICN ;
CONSTTK const
CHARTK char
IDENFR lowera
ASSIGN =
CHARCON a
COMMA ,
IDENFR lowerz
ASSIGN =
CHARCON z
COMMA ,
IDENFR capitalZ
ASSIGN =
CHARCON Z
COMMA ,
IDENFR char2
ASSIGN =
CHARCON 2
COMMA ,
IDENFR minusSy
ASSIGN =
CHARCON -
SEMICN ;
INTTK int
IDENFR random_name1
COMMA ,
IDENFR random_name2
SEMICN ;
VOIDTK void
IDENFR init
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ---- ---- ---- test for (0->17)
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR _endi
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
MINU -
LPARENT (
PLUS +
IDENFR i
DIV /
INTCON 3
RPARENT )
MULT *
INTCON 3
EQL ==
INTCON 0
RPARENT )
PRINTFTK printf
LPARENT (
STRCON i = 
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON end i = 
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ---- ---- ---- test for (15->-5)
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 15
SEMICN ;
IDENFR i
GEQ >=
MINU -
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON i = 
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON end i = 
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR fibic
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR return1
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR return1
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR fibic
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
PLUS +
IDENFR fibic
LPARENT (
IDENFR a
MINU -
INTCON 2
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR abs
LPARENT (
INTTK int
IDENFR kk
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR kk
LSS <
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
MINU -
IDENFR kk
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
IDENFR kk
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR plus
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR plussy
SEMICN ;
IDENFR plussy
ASSIGN =
CHARCON +
SEMICN ;
RETURNTK return
LPARENT (
IDENFR plussy
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR sum4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
COMMA ,
INTTK int
IDENFR d
RPARENT )
LBRACE {
INTTK int
IDENFR sum
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR a
PLUS +
IDENFR b
PLUS +
IDENFR c
PLUS +
IDENFR d
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ---------------
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON a = 
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON b = 
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON c = 
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON d = 
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON sum = 
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ---------------
RPARENT )
SEMICN ;
RETURNTK return
LPARENT (
IDENFR sum
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR maxFibic
ASSIGN =
INTCON 13
SEMICN ;
CONSTTK const
CHARTK char
IDENFR chartimes
ASSIGN =
CHARCON *
SEMICN ;
INTTK int
IDENFR cal
SEMICN ;
CHARTK char
IDENFR outch
COMMA ,
IDENFR underline
SEMICN ;
INTTK int
IDENFR toPrinti
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ---- ---- ---- test scanf(intput int)
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR toPrinti
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR toPrinti
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ---- ---- ---- test scanf(intput int char)
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR cal
COMMA ,
IDENFR outch
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON \n
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR cal
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON input cal != 0, cal = 
COMMA ,
IDENFR cal
RPARENT )
SEMICN ;
IDENFR cal
ASSIGN =
IDENFR abs
LPARENT (
IDENFR cal
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR cal
GEQ >=
IDENFR maxFibic
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON cal value should <= 
COMMA ,
IDENFR maxFibic
RPARENT )
SEMICN ;
IDENFR cal
ASSIGN =
IDENFR maxFibic
SEMICN ;
RBRACE }
IDENFR init
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ---- ---- ---- test call func
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON fibic val = 
COMMA ,
IDENFR fibic
LPARENT (
IDENFR cal
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON abs(-7) = 
COMMA ,
IDENFR abs
LPARENT (
MINU -
INTCON 7
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ---- ---- ---- test while (0 -> 6)
RPARENT )
SEMICN ;
IDENFR cal
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR cal
LSS <
INTCON 7
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON cal = 
COMMA ,
IDENFR cal
RPARENT )
SEMICN ;
IDENFR cal
ASSIGN =
IDENFR cal
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON ---- ---- ---- test do while (-17->3)
RPARENT )
SEMICN ;
IDENFR cal
ASSIGN =
MINU -
INTCON 17
SEMICN ;
DOTK do
LBRACE {
PRINTFTK printf
LPARENT (
STRCON cal = 
COMMA ,
IDENFR cal
RPARENT )
SEMICN ;
IDENFR cal
ASSIGN =
IDENFR cal
PLUS +
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR cal
LSS <
INTCON 4
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ---- ---- ---- test char val
RPARENT )
SEMICN ;
IDENFR underline
ASSIGN =
CHARCON _
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON +-*/_
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR plus
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR minusSy
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR chartimes
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
CHARCON /
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR underline
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR outch
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ---- ---- ---- test func call
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON (expect 91)sum4=
COMMA ,
IDENFR sum4
LPARENT (
INTCON 1
COMMA ,
IDENFR sum4
LPARENT (
INTCON 2
COMMA ,
IDENFR sum4
LPARENT (
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RPARENT )
COMMA ,
INTCON 7
COMMA ,
INTCON 8
RPARENT )
COMMA ,
INTCON 9
COMMA ,
IDENFR sum4
LPARENT (
INTCON 10
COMMA ,
INTCON 11
COMMA ,
INTCON 12
COMMA ,
INTCON 13
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR sum4
LPARENT (
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RPARENT )
NEQ !=
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON 1 + 2 + 3 + 4 != 10
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON 1 + 2 + 3 + 4 == 10
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
